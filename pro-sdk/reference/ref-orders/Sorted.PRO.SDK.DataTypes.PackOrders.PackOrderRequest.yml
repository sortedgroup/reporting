### YamlMime:ManagedReference
items:
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest
  commentId: T:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest
  id: PackOrderRequest
  parent: Sorted.PRO.SDK.DataTypes.PackOrders
  children:
  - Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.CustomsDocumentation
  - Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.GenerateReturn
  - Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.MetaData
  - Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReference
  - Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReferenceProvidedByCustomer
  - Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Packages
  - Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Tags
  langs:
  - csharp
  - vb
  name: PackOrderRequest
  nameWithType: PackOrderRequest
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest
  type: Class
  source:
    remote:
      path: Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: PackOrderRequest
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
    startLine: 11
  assemblies:
  - Sorted.PRO.SDK.DataTypes.Orders
  namespace: Sorted.PRO.SDK.DataTypes.PackOrders
  syntax:
    content: >-
      [DataContract]

      [DataContractType("Pack Order Request", "Used to pack orders. If the same request is provided then duplicate consignments will be created.")]

      public class PackOrderRequest
    content.vb: >-
      <DataContract>

      <DataContractType("Pack Order Request", "Used to pack orders. If the same request is provided then duplicate consignments will be created.")>

      Public Class PackOrderRequest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractType
    ctor: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractType.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Pack Order Request
    - type: System.String
      value: Used to pack orders. If the same request is provided then duplicate consignments will be created.
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReference
  commentId: P:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReference
  id: OrderReference
  parent: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest
  langs:
  - csharp
  - vb
  name: OrderReference
  nameWithType: PackOrderRequest.OrderReference
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReference
  type: Property
  source:
    remote:
      path: Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: OrderReference
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
    startLine: 16
  assemblies:
  - Sorted.PRO.SDK.DataTypes.Orders
  namespace: Sorted.PRO.SDK.DataTypes.PackOrders
  syntax:
    content: >-
      [DataMember]

      [DataContractItem("The reference of the order to pack.", false, PropertyCollectionType.Single)]

      public string OrderReference { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      <DataContractItem("The reference of the order to pack.", False, PropertyCollectionType.Single)>

      Public Property OrderReference As String
  overload: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReference*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem
    ctor: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem.#ctor(System.String,System.Boolean,Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType)
    arguments:
    - type: System.String
      value: The reference of the order to pack.
    - type: System.Boolean
      value: false
    - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReferenceProvidedByCustomer
  commentId: P:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReferenceProvidedByCustomer
  id: OrderReferenceProvidedByCustomer
  parent: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest
  langs:
  - csharp
  - vb
  name: OrderReferenceProvidedByCustomer
  nameWithType: PackOrderRequest.OrderReferenceProvidedByCustomer
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReferenceProvidedByCustomer
  type: Property
  source:
    remote:
      path: Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: OrderReferenceProvidedByCustomer
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
    startLine: 20
  assemblies:
  - Sorted.PRO.SDK.DataTypes.Orders
  namespace: Sorted.PRO.SDK.DataTypes.PackOrders
  syntax:
    content: >-
      [DataMember]

      [DataContractItem("Optional order reference to add as a reference to the consignment created as a result of this order. This will override any previously defined OrderReferenceProvidedByCustomer.", false, PropertyCollectionType.Single)]

      public string OrderReferenceProvidedByCustomer { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      <DataContractItem("Optional order reference to add as a reference to the consignment created as a result of this order. This will override any previously defined OrderReferenceProvidedByCustomer.", False, PropertyCollectionType.Single)>

      Public Property OrderReferenceProvidedByCustomer As String
  overload: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReferenceProvidedByCustomer*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem
    ctor: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem.#ctor(System.String,System.Boolean,Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType)
    arguments:
    - type: System.String
      value: Optional order reference to add as a reference to the consignment created as a result of this order. This will override any previously defined OrderReferenceProvidedByCustomer.
    - type: System.Boolean
      value: false
    - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.GenerateReturn
  commentId: P:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.GenerateReturn
  id: GenerateReturn
  parent: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest
  langs:
  - csharp
  - vb
  name: GenerateReturn
  nameWithType: PackOrderRequest.GenerateReturn
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.GenerateReturn
  type: Property
  source:
    remote:
      path: Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: GenerateReturn
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
    startLine: 24
  assemblies:
  - Sorted.PRO.SDK.DataTypes.Orders
  namespace: Sorted.PRO.SDK.DataTypes.PackOrders
  syntax:
    content: >-
      [DataMember]

      [DataContractItem("Indicates whether to generate a return consignment at the same time as packing this consignment.", false, PropertyCollectionType.Single)]

      public bool GenerateReturn { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      <DataContractItem("Indicates whether to generate a return consignment at the same time as packing this consignment.", False, PropertyCollectionType.Single)>

      Public Property GenerateReturn As Boolean
  overload: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.GenerateReturn*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem
    ctor: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem.#ctor(System.String,System.Boolean,Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType)
    arguments:
    - type: System.String
      value: Indicates whether to generate a return consignment at the same time as packing this consignment.
    - type: System.Boolean
      value: false
    - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Packages
  commentId: P:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Packages
  id: Packages
  parent: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest
  langs:
  - csharp
  - vb
  name: Packages
  nameWithType: PackOrderRequest.Packages
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Packages
  type: Property
  source:
    remote:
      path: Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: Packages
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
    startLine: 28
  assemblies:
  - Sorted.PRO.SDK.DataTypes.Orders
  namespace: Sorted.PRO.SDK.DataTypes.PackOrders
  syntax:
    content: >-
      [DataMember]

      [DataContractItem("Details of the packages to pack. You must provide details of one or more package.", PropertyCollectionType.Collection)]

      public List<Package> Packages { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sorted.PRO.SDK.DataTypes.PackOrders.Package}
    content.vb: >-
      <DataMember>

      <DataContractItem("Details of the packages to pack. You must provide details of one or more package.", PropertyCollectionType.Collection)>

      Public Property Packages As List(Of Package)
  overload: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Packages*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem
    ctor: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem.#ctor(System.String,Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType)
    arguments:
    - type: System.String
      value: Details of the packages to pack. You must provide details of one or more package.
    - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.MetaData
  commentId: P:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.MetaData
  id: MetaData
  parent: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest
  langs:
  - csharp
  - vb
  name: MetaData
  nameWithType: PackOrderRequest.MetaData
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.MetaData
  type: Property
  source:
    remote:
      path: Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: MetaData
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
    startLine: 32
  assemblies:
  - Sorted.PRO.SDK.DataTypes.Orders
  namespace: Sorted.PRO.SDK.DataTypes.PackOrders
  syntax:
    content: >-
      [DataMember]

      [DataContractItem("Optional metadata relating to the order.", PropertyCollectionType.Collection)]

      [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]

      public List<MetaData> MetaData { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sorted.PRO.SDK.DataTypes.Common.MetaData}
    content.vb: >-
      <DataMember>

      <DataContractItem("Optional metadata relating to the order.", PropertyCollectionType.Collection)>

      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore)>

      Public Property MetaData As List(Of MetaData)
  overload: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.MetaData*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem
    ctor: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem.#ctor(System.String,Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType)
    arguments:
    - type: System.String
      value: Optional metadata relating to the order.
    - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType
      value: 1
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.CustomsDocumentation
  commentId: P:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.CustomsDocumentation
  id: CustomsDocumentation
  parent: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest
  langs:
  - csharp
  - vb
  name: CustomsDocumentation
  nameWithType: PackOrderRequest.CustomsDocumentation
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.CustomsDocumentation
  type: Property
  source:
    remote:
      path: Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: CustomsDocumentation
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
    startLine: 37
  assemblies:
  - Sorted.PRO.SDK.DataTypes.Orders
  namespace: Sorted.PRO.SDK.DataTypes.PackOrders
  syntax:
    content: >-
      [DataMember]

      [DataContractItem("Information to be used in the generation of customs declaration documents.", false, PropertyCollectionType.Single)]

      public CustomsDocumentation CustomsDocumentation { get; set; }
    parameters: []
    return:
      type: Sorted.PRO.SDK.DataTypes.Consignments.CustomsDocumentation
    content.vb: >-
      <DataMember>

      <DataContractItem("Information to be used in the generation of customs declaration documents.", False, PropertyCollectionType.Single)>

      Public Property CustomsDocumentation As CustomsDocumentation
  overload: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.CustomsDocumentation*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem
    ctor: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem.#ctor(System.String,System.Boolean,Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType)
    arguments:
    - type: System.String
      value: Information to be used in the generation of customs declaration documents.
    - type: System.Boolean
      value: false
    - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Tags
  commentId: P:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Tags
  id: Tags
  parent: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest
  langs:
  - csharp
  - vb
  name: Tags
  nameWithType: PackOrderRequest.Tags
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Tags
  type: Property
  source:
    remote:
      path: Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: Tags
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.DataTypes.Orders/PackOrders/PackOrderRequest.cs
    startLine: 44
  assemblies:
  - Sorted.PRO.SDK.DataTypes.Orders
  namespace: Sorted.PRO.SDK.DataTypes.PackOrders
  summary: "\nlist of tags which if set will be used to filter out carrierservices without matching tags\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      [DataContractItem("used to filter which services will be used when allocating this order. (passing a non-null collection will override any tags placed on the Order)", false, PropertyCollectionType.Single)]

      public List<string> Tags { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: >-
      <DataMember>

      <DataContractItem("used to filter which services will be used when allocating this order. (passing a non-null collection will override any tags placed on the Order)", False, PropertyCollectionType.Single)>

      Public Property Tags As List(Of String)
  overload: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Tags*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem
    ctor: Sorted.PRO.SDK.Shared.Attributes.Documentation.DataContractItem.#ctor(System.String,System.Boolean,Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType)
    arguments:
    - type: System.String
      value: used to filter which services will be used when allocating this order. (passing a non-null collection will override any tags placed on the Order)
    - type: System.Boolean
      value: false
    - type: Sorted.PRO.SDK.Shared.Attributes.Documentation.Enums.PropertyCollectionType
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sorted.PRO.SDK.DataTypes.PackOrders
  commentId: N:Sorted.PRO.SDK.DataTypes.PackOrders
  name: Sorted.PRO.SDK.DataTypes.PackOrders
  nameWithType: Sorted.PRO.SDK.DataTypes.PackOrders
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReference*
  commentId: Overload:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReference
  name: OrderReference
  nameWithType: PackOrderRequest.OrderReference
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReference
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReferenceProvidedByCustomer*
  commentId: Overload:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReferenceProvidedByCustomer
  name: OrderReferenceProvidedByCustomer
  nameWithType: PackOrderRequest.OrderReferenceProvidedByCustomer
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.OrderReferenceProvidedByCustomer
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.GenerateReturn*
  commentId: Overload:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.GenerateReturn
  name: GenerateReturn
  nameWithType: PackOrderRequest.GenerateReturn
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.GenerateReturn
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Packages*
  commentId: Overload:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Packages
  name: Packages
  nameWithType: PackOrderRequest.Packages
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Packages
- uid: System.Collections.Generic.List{Sorted.PRO.SDK.DataTypes.PackOrders.Package}
  commentId: T:System.Collections.Generic.List{Sorted.PRO.SDK.DataTypes.PackOrders.Package}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Package>
  nameWithType: List<Package>
  fullName: System.Collections.Generic.List<Sorted.PRO.SDK.DataTypes.PackOrders.Package>
  nameWithType.vb: List(Of Package)
  fullName.vb: System.Collections.Generic.List(Of Sorted.PRO.SDK.DataTypes.PackOrders.Package)
  name.vb: List(Of Package)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sorted.PRO.SDK.DataTypes.PackOrders.Package
    name: Package
    nameWithType: Package
    fullName: Sorted.PRO.SDK.DataTypes.PackOrders.Package
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sorted.PRO.SDK.DataTypes.PackOrders.Package
    name: Package
    nameWithType: Package
    fullName: Sorted.PRO.SDK.DataTypes.PackOrders.Package
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.MetaData*
  commentId: Overload:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.MetaData
  name: MetaData
  nameWithType: PackOrderRequest.MetaData
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.MetaData
- uid: System.Collections.Generic.List{Sorted.PRO.SDK.DataTypes.Common.MetaData}
  commentId: T:System.Collections.Generic.List{Sorted.PRO.SDK.DataTypes.Common.MetaData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MetaData>
  nameWithType: List<MetaData>
  fullName: System.Collections.Generic.List<Sorted.PRO.SDK.DataTypes.Common.MetaData>
  nameWithType.vb: List(Of MetaData)
  fullName.vb: System.Collections.Generic.List(Of Sorted.PRO.SDK.DataTypes.Common.MetaData)
  name.vb: List(Of MetaData)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sorted.PRO.SDK.DataTypes.Common.MetaData
    name: MetaData
    nameWithType: MetaData
    fullName: Sorted.PRO.SDK.DataTypes.Common.MetaData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sorted.PRO.SDK.DataTypes.Common.MetaData
    name: MetaData
    nameWithType: MetaData
    fullName: Sorted.PRO.SDK.DataTypes.Common.MetaData
  - name: )
    nameWithType: )
    fullName: )
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.CustomsDocumentation*
  commentId: Overload:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.CustomsDocumentation
  name: CustomsDocumentation
  nameWithType: PackOrderRequest.CustomsDocumentation
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.CustomsDocumentation
- uid: Sorted.PRO.SDK.DataTypes.Consignments.CustomsDocumentation
  commentId: T:Sorted.PRO.SDK.DataTypes.Consignments.CustomsDocumentation
  parent: Sorted.PRO.SDK.DataTypes.Consignments
  name: CustomsDocumentation
  nameWithType: CustomsDocumentation
  fullName: Sorted.PRO.SDK.DataTypes.Consignments.CustomsDocumentation
- uid: Sorted.PRO.SDK.DataTypes.Consignments
  commentId: N:Sorted.PRO.SDK.DataTypes.Consignments
  name: Sorted.PRO.SDK.DataTypes.Consignments
  nameWithType: Sorted.PRO.SDK.DataTypes.Consignments
  fullName: Sorted.PRO.SDK.DataTypes.Consignments
- uid: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Tags*
  commentId: Overload:Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Tags
  name: Tags
  nameWithType: PackOrderRequest.Tags
  fullName: Sorted.PRO.SDK.DataTypes.PackOrders.PackOrderRequest.Tags
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
