### YamlMime:ManagedReference
items:
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  commentId: T:Sorted.PRO.SDK.Interfaces.Security.IRoleService
  id: IRoleService
  parent: Sorted.PRO.SDK.Interfaces.Security
  children:
  - Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRole(System.Guid,System.Guid)
  - Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRoleAsync(System.Guid,System.Guid)
  - Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRole(Sorted.PRO.SDK.DataTypes.Role.NewRole)
  - Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRoleAsync(Sorted.PRO.SDK.DataTypes.Role.NewRole)
  - Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRole(System.Guid)
  - Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRoleAsync(System.Guid)
  - Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRole(System.Guid)
  - Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRoleAsync(System.Guid)
  - Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRole(System.Guid,System.Guid)
  - Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRoleAsync(System.Guid,System.Guid)
  - Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRole(Sorted.PRO.SDK.DataTypes.Role.UpdateRole)
  - Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRoleAsync(Sorted.PRO.SDK.DataTypes.Role.UpdateRole)
  langs:
  - csharp
  - vb
  name: IRoleService
  nameWithType: IRoleService
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  type: Interface
  source:
    remote:
      path: Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: IRoleService
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
    startLine: 9
  assemblies:
  - Sorted.PRO.SDK.Interfaces.Security
  namespace: Sorted.PRO.SDK.Interfaces.Security
  syntax:
    content: public interface IRoleService
    content.vb: Public Interface IRoleService
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRole(Sorted.PRO.SDK.DataTypes.Role.NewRole)
  commentId: M:Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRole(Sorted.PRO.SDK.DataTypes.Role.NewRole)
  id: CreateCustomRole(Sorted.PRO.SDK.DataTypes.Role.NewRole)
  parent: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  langs:
  - csharp
  - vb
  name: CreateCustomRole(NewRole)
  nameWithType: IRoleService.CreateCustomRole(NewRole)
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRole(Sorted.PRO.SDK.DataTypes.Role.NewRole)
  type: Method
  source:
    remote:
      path: Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: CreateCustomRole
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
    startLine: 11
  assemblies:
  - Sorted.PRO.SDK.Interfaces.Security
  namespace: Sorted.PRO.SDK.Interfaces.Security
  syntax:
    content: Role CreateCustomRole(NewRole role)
    parameters:
    - id: role
      type: Sorted.PRO.SDK.DataTypes.Role.NewRole
    return:
      type: Sorted.PRO.SDK.DataTypes.Security.Role
    content.vb: Function CreateCustomRole(role As NewRole) As Role
  overload: Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRole*
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRole(System.Guid)
  commentId: M:Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRole(System.Guid)
  id: DeleteRole(System.Guid)
  parent: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  langs:
  - csharp
  - vb
  name: DeleteRole(Guid)
  nameWithType: IRoleService.DeleteRole(Guid)
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRole(System.Guid)
  type: Method
  source:
    remote:
      path: Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: DeleteRole
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
    startLine: 12
  assemblies:
  - Sorted.PRO.SDK.Interfaces.Security
  namespace: Sorted.PRO.SDK.Interfaces.Security
  syntax:
    content: void DeleteRole(Guid roleReference)
    parameters:
    - id: roleReference
      type: System.Guid
    content.vb: Sub DeleteRole(roleReference As Guid)
  overload: Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRole*
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRole(Sorted.PRO.SDK.DataTypes.Role.UpdateRole)
  commentId: M:Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRole(Sorted.PRO.SDK.DataTypes.Role.UpdateRole)
  id: UpdateRole(Sorted.PRO.SDK.DataTypes.Role.UpdateRole)
  parent: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  langs:
  - csharp
  - vb
  name: UpdateRole(UpdateRole)
  nameWithType: IRoleService.UpdateRole(UpdateRole)
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRole(Sorted.PRO.SDK.DataTypes.Role.UpdateRole)
  type: Method
  source:
    remote:
      path: Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: UpdateRole
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
    startLine: 13
  assemblies:
  - Sorted.PRO.SDK.Interfaces.Security
  namespace: Sorted.PRO.SDK.Interfaces.Security
  syntax:
    content: void UpdateRole(UpdateRole role)
    parameters:
    - id: role
      type: Sorted.PRO.SDK.DataTypes.Role.UpdateRole
    content.vb: Sub UpdateRole(role As UpdateRole)
  overload: Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRole*
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRole(System.Guid)
  commentId: M:Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRole(System.Guid)
  id: GetAccountsWithinRole(System.Guid)
  parent: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  langs:
  - csharp
  - vb
  name: GetAccountsWithinRole(Guid)
  nameWithType: IRoleService.GetAccountsWithinRole(Guid)
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRole(System.Guid)
  type: Method
  source:
    remote:
      path: Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: GetAccountsWithinRole
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
    startLine: 14
  assemblies:
  - Sorted.PRO.SDK.Interfaces.Security
  namespace: Sorted.PRO.SDK.Interfaces.Security
  syntax:
    content: List<Account> GetAccountsWithinRole(Guid roleReference)
    parameters:
    - id: roleReference
      type: System.Guid
    return:
      type: System.Collections.Generic.List{Sorted.PRO.SDK.DataTypes.Common.Account}
    content.vb: Function GetAccountsWithinRole(roleReference As Guid) As List(Of Account)
  overload: Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRole*
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRole(System.Guid,System.Guid)
  commentId: M:Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRole(System.Guid,System.Guid)
  id: AddAccountToRole(System.Guid,System.Guid)
  parent: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  langs:
  - csharp
  - vb
  name: AddAccountToRole(Guid, Guid)
  nameWithType: IRoleService.AddAccountToRole(Guid, Guid)
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRole(System.Guid, System.Guid)
  type: Method
  source:
    remote:
      path: Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: AddAccountToRole
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
    startLine: 15
  assemblies:
  - Sorted.PRO.SDK.Interfaces.Security
  namespace: Sorted.PRO.SDK.Interfaces.Security
  syntax:
    content: void AddAccountToRole(Guid roleReference, Guid accountReference)
    parameters:
    - id: roleReference
      type: System.Guid
    - id: accountReference
      type: System.Guid
    content.vb: Sub AddAccountToRole(roleReference As Guid, accountReference As Guid)
  overload: Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRole*
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRole(System.Guid,System.Guid)
  commentId: M:Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRole(System.Guid,System.Guid)
  id: RemoveAccountFromRole(System.Guid,System.Guid)
  parent: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  langs:
  - csharp
  - vb
  name: RemoveAccountFromRole(Guid, Guid)
  nameWithType: IRoleService.RemoveAccountFromRole(Guid, Guid)
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRole(System.Guid, System.Guid)
  type: Method
  source:
    remote:
      path: Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: RemoveAccountFromRole
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
    startLine: 16
  assemblies:
  - Sorted.PRO.SDK.Interfaces.Security
  namespace: Sorted.PRO.SDK.Interfaces.Security
  syntax:
    content: void RemoveAccountFromRole(Guid roleReference, Guid accountReference)
    parameters:
    - id: roleReference
      type: System.Guid
    - id: accountReference
      type: System.Guid
    content.vb: Sub RemoveAccountFromRole(roleReference As Guid, accountReference As Guid)
  overload: Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRole*
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRoleAsync(Sorted.PRO.SDK.DataTypes.Role.NewRole)
  commentId: M:Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRoleAsync(Sorted.PRO.SDK.DataTypes.Role.NewRole)
  id: CreateCustomRoleAsync(Sorted.PRO.SDK.DataTypes.Role.NewRole)
  parent: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  langs:
  - csharp
  - vb
  name: CreateCustomRoleAsync(NewRole)
  nameWithType: IRoleService.CreateCustomRoleAsync(NewRole)
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRoleAsync(Sorted.PRO.SDK.DataTypes.Role.NewRole)
  type: Method
  source:
    remote:
      path: Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: CreateCustomRoleAsync
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
    startLine: 17
  assemblies:
  - Sorted.PRO.SDK.Interfaces.Security
  namespace: Sorted.PRO.SDK.Interfaces.Security
  syntax:
    content: Task<Role> CreateCustomRoleAsync(NewRole role)
    parameters:
    - id: role
      type: Sorted.PRO.SDK.DataTypes.Role.NewRole
    return:
      type: System.Threading.Tasks.Task{Sorted.PRO.SDK.DataTypes.Security.Role}
    content.vb: Function CreateCustomRoleAsync(role As NewRole) As Task(Of Role)
  overload: Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRoleAsync*
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRoleAsync(System.Guid)
  commentId: M:Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRoleAsync(System.Guid)
  id: DeleteRoleAsync(System.Guid)
  parent: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  langs:
  - csharp
  - vb
  name: DeleteRoleAsync(Guid)
  nameWithType: IRoleService.DeleteRoleAsync(Guid)
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRoleAsync(System.Guid)
  type: Method
  source:
    remote:
      path: Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: DeleteRoleAsync
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
    startLine: 18
  assemblies:
  - Sorted.PRO.SDK.Interfaces.Security
  namespace: Sorted.PRO.SDK.Interfaces.Security
  syntax:
    content: Task DeleteRoleAsync(Guid roleReference)
    parameters:
    - id: roleReference
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function DeleteRoleAsync(roleReference As Guid) As Task
  overload: Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRoleAsync*
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRoleAsync(Sorted.PRO.SDK.DataTypes.Role.UpdateRole)
  commentId: M:Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRoleAsync(Sorted.PRO.SDK.DataTypes.Role.UpdateRole)
  id: UpdateRoleAsync(Sorted.PRO.SDK.DataTypes.Role.UpdateRole)
  parent: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  langs:
  - csharp
  - vb
  name: UpdateRoleAsync(UpdateRole)
  nameWithType: IRoleService.UpdateRoleAsync(UpdateRole)
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRoleAsync(Sorted.PRO.SDK.DataTypes.Role.UpdateRole)
  type: Method
  source:
    remote:
      path: Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: UpdateRoleAsync
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
    startLine: 19
  assemblies:
  - Sorted.PRO.SDK.Interfaces.Security
  namespace: Sorted.PRO.SDK.Interfaces.Security
  syntax:
    content: Task UpdateRoleAsync(UpdateRole role)
    parameters:
    - id: role
      type: Sorted.PRO.SDK.DataTypes.Role.UpdateRole
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function UpdateRoleAsync(role As UpdateRole) As Task
  overload: Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRoleAsync*
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRoleAsync(System.Guid)
  commentId: M:Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRoleAsync(System.Guid)
  id: GetAccountsWithinRoleAsync(System.Guid)
  parent: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  langs:
  - csharp
  - vb
  name: GetAccountsWithinRoleAsync(Guid)
  nameWithType: IRoleService.GetAccountsWithinRoleAsync(Guid)
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRoleAsync(System.Guid)
  type: Method
  source:
    remote:
      path: Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: GetAccountsWithinRoleAsync
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
    startLine: 20
  assemblies:
  - Sorted.PRO.SDK.Interfaces.Security
  namespace: Sorted.PRO.SDK.Interfaces.Security
  syntax:
    content: Task<List<Account>> GetAccountsWithinRoleAsync(Guid roleReference)
    parameters:
    - id: roleReference
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Sorted.PRO.SDK.DataTypes.Common.Account}}
    content.vb: Function GetAccountsWithinRoleAsync(roleReference As Guid) As Task(Of List(Of Account))
  overload: Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRoleAsync*
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRoleAsync(System.Guid,System.Guid)
  commentId: M:Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRoleAsync(System.Guid,System.Guid)
  id: AddAccountToRoleAsync(System.Guid,System.Guid)
  parent: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  langs:
  - csharp
  - vb
  name: AddAccountToRoleAsync(Guid, Guid)
  nameWithType: IRoleService.AddAccountToRoleAsync(Guid, Guid)
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRoleAsync(System.Guid, System.Guid)
  type: Method
  source:
    remote:
      path: Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: AddAccountToRoleAsync
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
    startLine: 21
  assemblies:
  - Sorted.PRO.SDK.Interfaces.Security
  namespace: Sorted.PRO.SDK.Interfaces.Security
  syntax:
    content: Task AddAccountToRoleAsync(Guid roleReference, Guid accountReference)
    parameters:
    - id: roleReference
      type: System.Guid
    - id: accountReference
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function AddAccountToRoleAsync(roleReference As Guid, accountReference As Guid) As Task
  overload: Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRoleAsync*
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRoleAsync(System.Guid,System.Guid)
  commentId: M:Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRoleAsync(System.Guid,System.Guid)
  id: RemoveAccountFromRoleAsync(System.Guid,System.Guid)
  parent: Sorted.PRO.SDK.Interfaces.Security.IRoleService
  langs:
  - csharp
  - vb
  name: RemoveAccountFromRoleAsync(Guid, Guid)
  nameWithType: IRoleService.RemoveAccountFromRoleAsync(Guid, Guid)
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRoleAsync(System.Guid, System.Guid)
  type: Method
  source:
    remote:
      path: Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
      branch: doc-comments
      repo: git@bitbucket.org:mpdelectio/sorted.pro.sdk.git
    id: RemoveAccountFromRoleAsync
    path: ../../sorted.pro.sdk/Sorted.PRO.SDK.Interfaces.Security/IRoleService.cs
    startLine: 22
  assemblies:
  - Sorted.PRO.SDK.Interfaces.Security
  namespace: Sorted.PRO.SDK.Interfaces.Security
  syntax:
    content: Task RemoveAccountFromRoleAsync(Guid roleReference, Guid accountReference)
    parameters:
    - id: roleReference
      type: System.Guid
    - id: accountReference
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function RemoveAccountFromRoleAsync(roleReference As Guid, accountReference As Guid) As Task
  overload: Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRoleAsync*
references:
- uid: Sorted.PRO.SDK.Interfaces.Security
  commentId: N:Sorted.PRO.SDK.Interfaces.Security
  name: Sorted.PRO.SDK.Interfaces.Security
  nameWithType: Sorted.PRO.SDK.Interfaces.Security
  fullName: Sorted.PRO.SDK.Interfaces.Security
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRole*
  commentId: Overload:Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRole
  name: CreateCustomRole
  nameWithType: IRoleService.CreateCustomRole
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRole
- uid: Sorted.PRO.SDK.DataTypes.Role.NewRole
  commentId: T:Sorted.PRO.SDK.DataTypes.Role.NewRole
  parent: Sorted.PRO.SDK.DataTypes.Role
  name: NewRole
  nameWithType: NewRole
  fullName: Sorted.PRO.SDK.DataTypes.Role.NewRole
- uid: Sorted.PRO.SDK.DataTypes.Security.Role
  commentId: T:Sorted.PRO.SDK.DataTypes.Security.Role
  parent: Sorted.PRO.SDK.DataTypes.Security
  name: Role
  nameWithType: Role
  fullName: Sorted.PRO.SDK.DataTypes.Security.Role
- uid: Sorted.PRO.SDK.DataTypes.Role
  commentId: N:Sorted.PRO.SDK.DataTypes.Role
  name: Sorted.PRO.SDK.DataTypes.Role
  nameWithType: Sorted.PRO.SDK.DataTypes.Role
  fullName: Sorted.PRO.SDK.DataTypes.Role
- uid: Sorted.PRO.SDK.DataTypes.Security
  commentId: N:Sorted.PRO.SDK.DataTypes.Security
  name: Sorted.PRO.SDK.DataTypes.Security
  nameWithType: Sorted.PRO.SDK.DataTypes.Security
  fullName: Sorted.PRO.SDK.DataTypes.Security
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRole*
  commentId: Overload:Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRole
  name: DeleteRole
  nameWithType: IRoleService.DeleteRole
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRole
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRole*
  commentId: Overload:Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRole
  name: UpdateRole
  nameWithType: IRoleService.UpdateRole
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRole
- uid: Sorted.PRO.SDK.DataTypes.Role.UpdateRole
  commentId: T:Sorted.PRO.SDK.DataTypes.Role.UpdateRole
  parent: Sorted.PRO.SDK.DataTypes.Role
  name: UpdateRole
  nameWithType: UpdateRole
  fullName: Sorted.PRO.SDK.DataTypes.Role.UpdateRole
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRole*
  commentId: Overload:Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRole
  name: GetAccountsWithinRole
  nameWithType: IRoleService.GetAccountsWithinRole
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRole
- uid: System.Collections.Generic.List{Sorted.PRO.SDK.DataTypes.Common.Account}
  commentId: T:System.Collections.Generic.List{Sorted.PRO.SDK.DataTypes.Common.Account}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Account>
  nameWithType: List<Account>
  fullName: System.Collections.Generic.List<Sorted.PRO.SDK.DataTypes.Common.Account>
  nameWithType.vb: List(Of Account)
  fullName.vb: System.Collections.Generic.List(Of Sorted.PRO.SDK.DataTypes.Common.Account)
  name.vb: List(Of Account)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sorted.PRO.SDK.DataTypes.Common.Account
    name: Account
    nameWithType: Account
    fullName: Sorted.PRO.SDK.DataTypes.Common.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sorted.PRO.SDK.DataTypes.Common.Account
    name: Account
    nameWithType: Account
    fullName: Sorted.PRO.SDK.DataTypes.Common.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRole*
  commentId: Overload:Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRole
  name: AddAccountToRole
  nameWithType: IRoleService.AddAccountToRole
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRole
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRole*
  commentId: Overload:Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRole
  name: RemoveAccountFromRole
  nameWithType: IRoleService.RemoveAccountFromRole
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRole
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRoleAsync*
  commentId: Overload:Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRoleAsync
  name: CreateCustomRoleAsync
  nameWithType: IRoleService.CreateCustomRoleAsync
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.CreateCustomRoleAsync
- uid: System.Threading.Tasks.Task{Sorted.PRO.SDK.DataTypes.Security.Role}
  commentId: T:System.Threading.Tasks.Task{Sorted.PRO.SDK.DataTypes.Security.Role}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Role>
  nameWithType: Task<Role>
  fullName: System.Threading.Tasks.Task<Sorted.PRO.SDK.DataTypes.Security.Role>
  nameWithType.vb: Task(Of Role)
  fullName.vb: System.Threading.Tasks.Task(Of Sorted.PRO.SDK.DataTypes.Security.Role)
  name.vb: Task(Of Role)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sorted.PRO.SDK.DataTypes.Security.Role
    name: Role
    nameWithType: Role
    fullName: Sorted.PRO.SDK.DataTypes.Security.Role
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sorted.PRO.SDK.DataTypes.Security.Role
    name: Role
    nameWithType: Role
    fullName: Sorted.PRO.SDK.DataTypes.Security.Role
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRoleAsync*
  commentId: Overload:Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRoleAsync
  name: DeleteRoleAsync
  nameWithType: IRoleService.DeleteRoleAsync
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.DeleteRoleAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRoleAsync*
  commentId: Overload:Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRoleAsync
  name: UpdateRoleAsync
  nameWithType: IRoleService.UpdateRoleAsync
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.UpdateRoleAsync
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRoleAsync*
  commentId: Overload:Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRoleAsync
  name: GetAccountsWithinRoleAsync
  nameWithType: IRoleService.GetAccountsWithinRoleAsync
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.GetAccountsWithinRoleAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Sorted.PRO.SDK.DataTypes.Common.Account}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Sorted.PRO.SDK.DataTypes.Common.Account}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<Account>>
  nameWithType: Task<List<Account>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Sorted.PRO.SDK.DataTypes.Common.Account>>
  nameWithType.vb: Task(Of List(Of Account))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Sorted.PRO.SDK.DataTypes.Common.Account))
  name.vb: Task(Of List(Of Account))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sorted.PRO.SDK.DataTypes.Common.Account
    name: Account
    nameWithType: Account
    fullName: Sorted.PRO.SDK.DataTypes.Common.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sorted.PRO.SDK.DataTypes.Common.Account
    name: Account
    nameWithType: Account
    fullName: Sorted.PRO.SDK.DataTypes.Common.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRoleAsync*
  commentId: Overload:Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRoleAsync
  name: AddAccountToRoleAsync
  nameWithType: IRoleService.AddAccountToRoleAsync
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.AddAccountToRoleAsync
- uid: Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRoleAsync*
  commentId: Overload:Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRoleAsync
  name: RemoveAccountFromRoleAsync
  nameWithType: IRoleService.RemoveAccountFromRoleAsync
  fullName: Sorted.PRO.SDK.Interfaces.Security.IRoleService.RemoveAccountFromRoleAsync
